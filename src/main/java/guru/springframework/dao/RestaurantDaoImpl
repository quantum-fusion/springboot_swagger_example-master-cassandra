/*
 * Copyright 2015-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * @author Henry Hottelet
 */

package guru.springframework.dao;

import com.datastax.driver.core.*;
import com.datastax.driver.core.querybuilder.Insert;
import com.datastax.driver.core.querybuilder.QueryBuilder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import guru.springframework.util.CustomException;

import java.sql.SQLException;
import java.util.ArrayList;

// import com.codahale.metrics.*;


/**
 * Created by Henry Hottelet
 */
@Component
public class RestaurantDaoImpl implements RestaurantDao {

    private static final Logger logger = LoggerFactory.getLogger(RestaurantDaoImpl.class);

    public Cluster cluster;
    // private Metadata metadata;
    //   private ArrayList<String> queryResults = new ArrayList<String>();

    public void createTable(String keySpace) throws SQLException, CustomException {

        try {

            Session session = cluster.connect(keySpace);

            session.execute("CREATE TABLE restaurants (" +
                    "cuisine text," +
                    "seating text," +
                    "restaurantId text PRIMARY KEY," +
                    ")WITH COMPACT STORAGE;");

            logger.info("Connected to cluster: %s\n" +
                    cluster.getClusterName());
        } catch (Exception e) {
            logger.error("Orm::createTable exception: ", e);
        }
    }



    public String setRestaurants(String keySpace, String restaurantId, String cuisine, String seating) throws SQLException, Exception, CustomException {

        try {
            Session session = cluster.connect(keySpace);

            //String cql = "SELECT * FROM restaurants.restaurantId WHERE restaurantId =\" + \"'\" + restaurantId + \"'\" +  \"allow filtering;";
            //ArrayList<String> queryList = new ArrayList<String>();
            //queryList = getRestaurants(querySchema(keySpace,cql));

            //   logger.debug("" + queryList);
            //  logger.debug("" + queryList.size());

            Insert insert = QueryBuilder
                    .insertInto("restaurants")
                    .value("cuisine", cuisine)
                    .value("seating", seating)
                    .value("restaurantId", restaurantId);

            logger.debug(insert.getQueryString());

            ResultSet results = session.execute(insert);

            return "200/Success";

        } catch (Exception e) {
            logger.error("Orm::setRestaurants exception: ", e);
        }

        return "500/Error: Orm::setRestaurants Exception";
    }

    public ArrayList<String> getRestaurants(ResultSet results) throws SQLException, Exception, CustomException {
        ArrayList<String> queryResults = new ArrayList<String>();

        for (Row row : results) {

            queryResults.add(String.format("%-20s\t%-20s\t%-20s\n",
                    row.getString("cuisine"),
                    row.getString("seating"),
                    row.getString("restaurantId")));
        }

        return queryResults;
    }

}
